#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test k·∫øt n·ªëi MySQL Database cho ShoeMart ChatBot
Ki·ªÉm tra t·∫•t c·∫£ t√≠nh nƒÉng database
"""

import sys
import traceback
from database_manager import get_database_service
from shoe_store_mysql_chatbot import ShoeMartMySQLChatBot

def test_database_connection():
    """Test k·∫øt n·ªëi c∆° b·∫£n"""
    print("üîç Test 1: K·∫øt n·ªëi Database")
    print("-" * 50)
    
    try:
        db_service = get_database_service()
        health = db_service.health_check()
        
        if health['connected']:
            print("‚úÖ K·∫øt n·ªëi database th√†nh c√¥ng!")
            print(f"üìä Status: {health['status']}")
            print(f"‚è∞ Time: {health['timestamp']}")
            return True
        else:
            print("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi database")
            return False
            
    except Exception as e:
        print(f"‚ùå L·ªói k·∫øt n·ªëi: {e}")
        return False

def test_product_queries():
    """Test c√°c query s·∫£n ph·∫©m"""
    print("\nüõçÔ∏è Test 2: Truy v·∫•n s·∫£n ph·∫©m")
    print("-" * 50)
    
    try:
        db_service = get_database_service()
        
        # Test l·∫•y t·∫•t c·∫£ s·∫£n ph·∫©m
        products = db_service.products.get_all_products()
        print(f"üì¶ T·ªïng s·ªë s·∫£n ph·∫©m: {len(products)}")
        
        if products:
            sample = db_service.format_product(products[0])
            print(f"üìù S·∫£n ph·∫©m m·∫´u: {sample['name']} - {sample['formatted_price']}")
        
        # Test t√¨m ki·∫øm theo t√™n
        search_results = db_service.products.search_products_by_name('Nike')
        print(f"üîç K·∫øt qu·∫£ t√¨m 'Nike': {len(search_results)} s·∫£n ph·∫©m")
        
        # Test l·∫•y theo category
        category_results = db_service.products.get_products_by_category('sneaker')
        print(f"üëü S·∫£n ph·∫©m sneaker: {len(category_results)} s·∫£n ph·∫©m")
        
        # Test s·∫£n ph·∫©m b√°n ch·∫°y
        popular = db_service.products.get_popular_products(5)
        print(f"üî• S·∫£n ph·∫©m b√°n ch·∫°y: {len(popular)} s·∫£n ph·∫©m")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói truy v·∫•n s·∫£n ph·∫©m: {e}")
        traceback.print_exc()
        return False

def test_price_range_queries():
    """Test truy v·∫•n theo kho·∫£ng gi√°"""
    print("\nüí∞ Test 3: Truy v·∫•n theo gi√°")
    print("-" * 50)
    
    try:
        db_service = get_database_service()
        
        # Test c√°c kho·∫£ng gi√° kh√°c nhau
        ranges = [
            (0, 1000000, "D∆∞·ªõi 1M"),
            (1000000, 3000000, "1M-3M"),
            (3000000, 5000000, "3M-5M"),
            (5000000, float('inf'), "Tr√™n 5M")
        ]
        
        for min_price, max_price, description in ranges:
            products = db_service.products.get_products_by_price_range(min_price, max_price)
            print(f"üí∏ {description}: {len(products)} s·∫£n ph·∫©m")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói truy v·∫•n gi√°: {e}")
        return False

def test_order_queries():
    """Test truy v·∫•n ƒë∆°n h√†ng"""
    print("\nüìä Test 4: Truy v·∫•n ƒë∆°n h√†ng")
    print("-" * 50)
    
    try:
        db_service = get_database_service()
        
        # Test th·ªëng k√™ b√°n h√†ng
        stats = db_service.orders.get_sales_statistics()
        print(f"üìà Th·ªëng k√™ b√°n h√†ng: {len(stats)} danh m·ª•c")
        
        if stats:
            for stat in stats:
                category = stat.get('Category', 'Unknown')
                sold = stat.get('TotalSold', 0)
                revenue = stat.get('Revenue', 0)
                print(f"   üè∑Ô∏è {category}: {sold} ƒë√¥i - {db_service.format_price(revenue)}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói truy v·∫•n ƒë∆°n h√†ng: {e}")
        return False

def test_chatbot_responses():
    """Test ph·∫£n h·ªìi chatbot"""
    print("\nü§ñ Test 5: ChatBot responses")
    print("-" * 50)
    
    try:
        chatbot = ShoeMartMySQLChatBot()
        
        test_queries = [
            "xin ch√†o",
            "c√≥ gi√†y g√¨",
            "gi√†y Nike",
            "s·∫£n ph·∫©m b√°n ch·∫°y",
            "gi√†y d∆∞·ªõi 2 tri·ªáu",
            "th·ªëng k√™ b√°n h√†ng"
        ]
        
        for query in test_queries:
            print(f"\nüë§ Test: '{query}'")
            response = chatbot.get_response(query)
            print(f"ü§ñ Response: {response[:100]}..." if len(response) > 100 else f"ü§ñ Response: {response}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói test chatbot: {e}")
        traceback.print_exc()
        return False

def test_database_schema():
    """Test schema database"""
    print("\nüóÑÔ∏è Test 6: Database Schema")
    print("-" * 50)
    
    try:
        db_service = get_database_service()
        
        # Query ƒë·ªÉ ki·ªÉm tra tables
        tables_query = "SHOW TABLES"
        with db_service.db_manager.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(tables_query)
            tables = cursor.fetchall()
            cursor.close()
        
        print("üìã Tables trong database:")
        for table in tables:
            table_name = table[0] if isinstance(table, tuple) else table
            print(f"   üìÑ {table_name}")
            
            # ƒê·∫øm s·ªë record trong m·ªói table
            count_query = f"SELECT COUNT(*) FROM {table_name}"
            with db_service.db_manager.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute(count_query)
                count = cursor.fetchone()[0]
                cursor.close()
                print(f"      üìä {count} records")
        
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói ki·ªÉm tra schema: {e}")
        return False

def run_all_tests():
    """Ch·∫°y t·∫•t c·∫£ tests"""
    print("üß™ ShoeMart MySQL ChatBot - Database Tests")
    print("=" * 70)
    
    tests = [
        ("Database Connection", test_database_connection),
        ("Product Queries", test_product_queries),
        ("Price Range Queries", test_price_range_queries),
        ("Order Queries", test_order_queries),
        ("ChatBot Responses", test_chatbot_responses),
        ("Database Schema", test_database_schema)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Test '{test_name}' failed with exception: {e}")
            results.append((test_name, False))
    
    # T·ªïng k·∫øt
    print("\n" + "=" * 70)
    print("üìä K·∫æT QU·∫¢ TESTS:")
    print("-" * 70)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status} - {test_name}")
        if result:
            passed += 1
    
    print(f"\nüéØ T·ªïng k·∫øt: {passed}/{len(tests)} tests passed")
    
    if passed == len(tests):
        print("üéâ T·∫•t c·∫£ tests ƒë·ªÅu th√†nh c√¥ng! ChatBot s·∫µn s√†ng ho·∫°t ƒë·ªông!")
    else:
        print("‚ö†Ô∏è M·ªôt s·ªë tests th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·∫°i c·∫•u h√¨nh.")
        print("üí° G·ª£i √Ω ki·ªÉm tra:")
        print("   - MySQL server ƒë√£ ch·∫°y ch∆∞a?")
        print("   - Database 'shoe_store_db' ƒë√£ t·ªìn t·∫°i ch∆∞a?")
        print("   - User/password trong config.py ƒë√∫ng ch∆∞a?")
        print("   - ƒê√£ ch·∫°y migrations t·ª´ C# project ch∆∞a?")

def main():
    """Main function"""
    if len(sys.argv) > 1:
        test_name = sys.argv[1].lower()
        
        if test_name == 'connection':
            test_database_connection()
        elif test_name == 'products':
            test_product_queries()
        elif test_name == 'prices':
            test_price_range_queries()
        elif test_name == 'orders':
            test_order_queries()
        elif test_name == 'chatbot':
            test_chatbot_responses()
        elif test_name == 'schema':
            test_database_schema()
        else:
            print("‚ùå Unknown test. Available: connection, products, prices, orders, chatbot, schema")
    else:
        run_all_tests()

if __name__ == "__main__":
    main()

